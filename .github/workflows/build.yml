#
# .github/workflows/build.yml
#
# SPDX-FileCopyrightText: 2025 Jens A. Koch.
# SPDX-License-Identifier: MIT

name: "🛠️ Build Vulkan SDK ARM"

on:
  # You can manually run this workflow.
  workflow_dispatch:
  # Run the workflow on Pull Requests.
  pull_request:
  # Run the workflow for changes to main and release branch.
  push:
    branches:
    - main
    - 'releases/*'
    tags:
    - '*.*.*.*'
  schedule:
    # Run the workflow weekly on Sunday at 00:00 UTC.
    - cron: '0 0 * * 0'

jobs:

# -----------------------------------------------------------------------------

  build:

# -----------------------------------------------------------------------------

    name: Build on ${{ matrix.OS }}
    runs-on: ${{ matrix.OS }}

    strategy:
      fail-fast: false
      matrix:
        OS:
          - ubuntu-22.04-arm
          - ubuntu-24.04-arm

    # "contents: write" allows the action to create a release
    # this is required by the release step, which uses "gh release create"
    permissions:
      contents: write

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      - name: 🔽 Setup Build Environment
        run: |
          sudo apt-get update
          if [[ "${{ matrix.OS }}" == "ubuntu-22.04-arm" ]]; then
            sudo apt install cmake ninja-build gcc-12 g++-12 bison ocaml-core xz-utils pkg-config python3-pip -y
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
            fi
          if [[ "${{ matrix.OS }}" == "ubuntu-24.04-arm" ]]; then
            sudo apt install cmake ninja-build gcc-14 g++-14 bison ocaml-core xz-utils pkg-config python3-pip -y
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          fi

      - name: 🔽 Setup Build Environment Python
        run: |
          pip3 install setuptools wheel

      - name: 🔽 Setup Build Dependencies
        run: |
          sudo apt install -y --no-install-recommends \
          libglm-dev libxcb-dri3-0 libxcb-present0 libpciaccess0 \
          libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev \
          libwayland-dev libxrandr-dev libxcb-randr0-dev libxcb-ewmh-dev \
          libx11-xcb-dev liblz4-dev libzstd-dev \
          libxml2-dev wayland-protocols

      - name: 🔍 Get latest version of Vulkan SDK
        run: echo "VK_SDK_LATEST_VERSION=1.3.275.0" >> $GITHUB_ENV

      - name: 🔍 Get latest version of vulkan-sdk-arm on Github Releases
        run: echo "GH_LATEST_RELEASE_VERSION=$(curl -s https://api.github.com/repos/jakoch/vulkan-sdk-arm/releases/latest | jq -r '.tag_name')" >> $GITHUB_ENV

      # Check if there is no existing release or if the latest version is different
      # -z "$GH_LATEST_RELEASE_VERSION":
      #  is true if GH_LATEST_RELEASE_VERSION is null or empty
      # "$VK_SDK_LATEST_VERSION" != "$GH_LATEST_RELEASE_VERSION":
      #  is true if the latest SDK version is different from the latest release version
      - name: 🔍 Check if the Vulkan SDK version is newer than the released version
        id: check_version
        run: |
          if [ -z "$GH_LATEST_RELEASE_VERSION" ] || [ "$VK_SDK_LATEST_VERSION" != "$GH_LATEST_RELEASE_VERSION" ]; then
            echo "NEW_VK_SDK_VERSION=true" >> $GITHUB_ENV
          else
            echo "NEW_VK_SDK_VERSION=false" >> $GITHUB_ENV
          fi

      - name: 📂 Create build directory
        run: mkdir -p /opt/vulkan-sdk

      - name: 🔽 Download Vulkan SDK
        working-directory: /opt/vulkan-sdk
        run: |
          curl -o vulkan-sdk.tar.xz https://sdk.lunarg.com/sdk/download/1.3.275.0/linux/vulkansdk-linux-x86_64-1.3.275.0.tar.xz
          tar -xJf vulkan-sdk.tar.xz
          rm vulkan-sdk.tar.xz
          ls -la
          ls -la $VK_SDK_LATEST_VERSION

      - name: 🙏 Build Vulkan SDK
        working-directory: /opt/vulkan-sdk
        run: |
          cd $VK_SDK_LATEST_VERSION
          ./vulkansdk --skip-deps --maxjobs \
            vulkan-loader \
            vulkan-validationlayers \
            vulkan-extensionlayer \
            vulkan-tools

# do we need to build the following?
#  headers \
#  loader \
#  layers \
#  shaderc \
#  spirv-tools \
#  glslang \
#  spirv-cross \
#  gfxrecon \
#  spirv-reflect \
#  vulkan-profiles \
#  volk \
#  vma \

      - name: ✂ Remove pre-built x86_64 and sources
        working-directory: /opt/vulkan-sdk
        run: |
          ls -la $VK_SDK_LATEST_VERSION/x86_64
          rm -r $VK_SDK_LATEST_VERSION/x86_64
          ls -la $VK_SDK_LATEST_VERSION/source
          rm -r $VK_SDK_LATEST_VERSION/source

      # ARTIFACT_RELEASE_NAME = vulkansdk-arm-1.2.3.4               - used for the release name
      # ARTIFACT_NAME         = vulkansdk-ubuntu-22.04-arm-1.2.3.4         - used for the artifact name
      # ARTIFACT_FILENAME     = vulkansdk-ubuntu-22.04-arm-1.2.3.4.tar.xz  - used for the artifact filename
      # The ARTIFACT_RELEASE_NAME does not contain the OS distribution version.
      # This allows to create a single release for all Ubuntu distributions and
      # publish two artifacts, one for each Ubuntu distribution (20.04, 24.04).
      # The ARTIFACT_NAME and ARTIFACT_FILENAME contain the OS distribution version.
      - name: 📑 Create Name for Release Artifact
        run: |
          echo "ARTIFACT_RELEASE_NAME=vulkansdk-arm-${{ env.VK_SDK_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=vulkansdk-${{ matrix.OS }}-${{ env.VK_SDK_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "ARTIFACT_FILENAME=vulkansdk-${{ matrix.OS }}-${{ env.VK_SDK_LATEST_VERSION }}.tar.xz" >> $GITHUB_ENV

      # Artifact name: vulkansdk-ubuntu-22.04-arm-1.2.3.4.tar.xz
      # We are packaging the Vulkan SDK into a tar.xz archive.
      # The archive contains the Vulkan SDK version as top-level directory.
      - name: 📦 Package Vulkan SDK
        working-directory: /opt/vulkan-sdk
        run: |
          tar -cJf $ARTIFACT_FILENAME $VK_SDK_LATEST_VERSION
          ls -la

      - name: 📦 🚀Upload Artifact Vulkan SDK
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /opt/vulkan-sdk/${{ env.ARTIFACT_FILENAME }}
          compression-level: 0
          retention-days: 3

      # Release if a new Vulkan SDK version is available and the event is a scheduled event,
      # or if the event is a push with a tag reference.
      # The release is tagged as "1.2.3.4".
      # The title is "vulkansdk-arm-1.2.3.4".
      # Step 1: Create a new release tag, if not exists.
      - name: 📦 🚀 Create Vulkan SDK Release
        if: (env.NEW_VK_SDK_VERSION == 'true' && github.event_name == 'schedule') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release view ${{ env.VK_SDK_LATEST_VERSION }} > /dev/null 2>&1; then
            gh release create ${{ env.VK_SDK_LATEST_VERSION }} \
              --title "${{ env.ARTIFACT_RELEASE_NAME }}" \
              --notes "Vulkan SDK for Linux ARM64 (aarch64) ${{ env.VK_SDK_LATEST_VERSION }}" \
              --latest
          fi

      # Step 2: Upload the artifact to the release tag.
      - name: 📦 🔼 Upload Vulkan SDK Artifact
        if: (env.NEW_VK_SDK_VERSION == 'true' && github.event_name == 'schedule') || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ env.VK_SDK_LATEST_VERSION }} /opt/vulkan-sdk/${{ env.ARTIFACT_FILENAME }}
